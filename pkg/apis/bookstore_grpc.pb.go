// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookstoreClient is the client API for Bookstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookstoreClient interface {
	GetBookInfoList(ctx context.Context, in *GetBookInfoListRequest, opts ...grpc.CallOption) (*GetBookInfoListResponse, error)
	PurchaseBook(ctx context.Context, in *PurchaseBookRequest, opts ...grpc.CallOption) (*PurchaseBookResponse, error)
	MyInventory(ctx context.Context, in *MyInventoryRequest, opts ...grpc.CallOption) (*MyInventoryResponse, error)
}

type bookstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBookstoreClient(cc grpc.ClientConnInterface) BookstoreClient {
	return &bookstoreClient{cc}
}

func (c *bookstoreClient) GetBookInfoList(ctx context.Context, in *GetBookInfoListRequest, opts ...grpc.CallOption) (*GetBookInfoListResponse, error) {
	out := new(GetBookInfoListResponse)
	err := c.cc.Invoke(ctx, "/Bookstore/GetBookInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) PurchaseBook(ctx context.Context, in *PurchaseBookRequest, opts ...grpc.CallOption) (*PurchaseBookResponse, error) {
	out := new(PurchaseBookResponse)
	err := c.cc.Invoke(ctx, "/Bookstore/PurchaseBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreClient) MyInventory(ctx context.Context, in *MyInventoryRequest, opts ...grpc.CallOption) (*MyInventoryResponse, error) {
	out := new(MyInventoryResponse)
	err := c.cc.Invoke(ctx, "/Bookstore/MyInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookstoreServer is the server API for Bookstore service.
// All implementations must embed UnimplementedBookstoreServer
// for forward compatibility
type BookstoreServer interface {
	GetBookInfoList(context.Context, *GetBookInfoListRequest) (*GetBookInfoListResponse, error)
	PurchaseBook(context.Context, *PurchaseBookRequest) (*PurchaseBookResponse, error)
	MyInventory(context.Context, *MyInventoryRequest) (*MyInventoryResponse, error)
	mustEmbedUnimplementedBookstoreServer()
}

// UnimplementedBookstoreServer must be embedded to have forward compatible implementations.
type UnimplementedBookstoreServer struct {
}

func (UnimplementedBookstoreServer) GetBookInfoList(context.Context, *GetBookInfoListRequest) (*GetBookInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookInfoList not implemented")
}
func (UnimplementedBookstoreServer) PurchaseBook(context.Context, *PurchaseBookRequest) (*PurchaseBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseBook not implemented")
}
func (UnimplementedBookstoreServer) MyInventory(context.Context, *MyInventoryRequest) (*MyInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyInventory not implemented")
}
func (UnimplementedBookstoreServer) mustEmbedUnimplementedBookstoreServer() {}

// UnsafeBookstoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookstoreServer will
// result in compilation errors.
type UnsafeBookstoreServer interface {
	mustEmbedUnimplementedBookstoreServer()
}

func RegisterBookstoreServer(s grpc.ServiceRegistrar, srv BookstoreServer) {
	s.RegisterService(&Bookstore_ServiceDesc, srv)
}

func _Bookstore_GetBookInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).GetBookInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bookstore/GetBookInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).GetBookInfoList(ctx, req.(*GetBookInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_PurchaseBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).PurchaseBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bookstore/PurchaseBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).PurchaseBook(ctx, req.(*PurchaseBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookstore_MyInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreServer).MyInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bookstore/MyInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreServer).MyInventory(ctx, req.(*MyInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookstore_ServiceDesc is the grpc.ServiceDesc for Bookstore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookstore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bookstore",
	HandlerType: (*BookstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookInfoList",
			Handler:    _Bookstore_GetBookInfoList_Handler,
		},
		{
			MethodName: "PurchaseBook",
			Handler:    _Bookstore_PurchaseBook_Handler,
		},
		{
			MethodName: "MyInventory",
			Handler:    _Bookstore_MyInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookstore.proto",
}

// ReportGeneratorClient is the client API for ReportGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportGeneratorClient interface {
	GetReciept(ctx context.Context, in *GetRecieptRequest, opts ...grpc.CallOption) (*GetRecieptResponse, error)
}

type reportGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewReportGeneratorClient(cc grpc.ClientConnInterface) ReportGeneratorClient {
	return &reportGeneratorClient{cc}
}

func (c *reportGeneratorClient) GetReciept(ctx context.Context, in *GetRecieptRequest, opts ...grpc.CallOption) (*GetRecieptResponse, error) {
	out := new(GetRecieptResponse)
	err := c.cc.Invoke(ctx, "/ReportGenerator/GetReciept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportGeneratorServer is the server API for ReportGenerator service.
// All implementations must embed UnimplementedReportGeneratorServer
// for forward compatibility
type ReportGeneratorServer interface {
	GetReciept(context.Context, *GetRecieptRequest) (*GetRecieptResponse, error)
	mustEmbedUnimplementedReportGeneratorServer()
}

// UnimplementedReportGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedReportGeneratorServer struct {
}

func (UnimplementedReportGeneratorServer) GetReciept(context.Context, *GetRecieptRequest) (*GetRecieptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReciept not implemented")
}
func (UnimplementedReportGeneratorServer) mustEmbedUnimplementedReportGeneratorServer() {}

// UnsafeReportGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportGeneratorServer will
// result in compilation errors.
type UnsafeReportGeneratorServer interface {
	mustEmbedUnimplementedReportGeneratorServer()
}

func RegisterReportGeneratorServer(s grpc.ServiceRegistrar, srv ReportGeneratorServer) {
	s.RegisterService(&ReportGenerator_ServiceDesc, srv)
}

func _ReportGenerator_GetReciept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecieptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportGeneratorServer).GetReciept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReportGenerator/GetReciept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportGeneratorServer).GetReciept(ctx, req.(*GetRecieptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportGenerator_ServiceDesc is the grpc.ServiceDesc for ReportGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReportGenerator",
	HandlerType: (*ReportGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReciept",
			Handler:    _ReportGenerator_GetReciept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookstore.proto",
}
